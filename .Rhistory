)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
recipe <- df_all_train %>%
select(target, one_of(df_imp_sel$variable)) %>%
recipe(target ~ .) %>%
step_meanimpute(all_numeric(), -contains("missing")) %>%
step_center(all_numeric(), -contains("missing"), -target) %>%
step_scale(all_numeric(), -contains("missing"), -target) %>%
step_pca(contains("missing"), num = 10)
recipe_prep <- prep(recipe)
recipe_bake <- prep(recipe, retain = TRUE) %>%
juice()
recipe <- df_all_train %>%
select(target, one_of(df_imp_sel$variable)) %>%
recipe(target ~ .) %>%
step_meanimpute(all_numeric(), -contains("missing")) %>%
step_center(all_numeric(), -contains("missing"), -target) %>%
step_scale(all_numeric(), -contains("missing"), -target)
# step_pca(contains("missing"), num = 10)
recipe_prep <- prep(recipe)
recipe_bake <- prep(recipe, retain = TRUE) %>%
juice()
glimpse(recipe_bake)
dim(recipe_bake)
split_val <- createDataPartition(recipe_bake$target, 1, 0.8, list = FALSE)
df_all_train_y <- as.matrix(recipe_bake[, 1])
df_all_train_x <- recipe_bake[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
df_all_train_y_tr <- df_all_train_y[split_val, ]
df_all_train_x_tr <- df_all_train_x[split_val, ]
df_all_train_y_val <- df_all_train_y[-split_val, ]
df_all_train_x_val <- df_all_train_x[-split_val, ]
model_nn <- keras_model_sequential() %>%
layer_dense(units = 150, activation = "relu", input_shape = c(219)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 150, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
split_val <- createDataPartition(recipe_bake$target, 1, 0.8, list = FALSE)
df_all_train_y <- as.matrix(recipe_bake[, 1])
df_all_train_x <- recipe_bake[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
df_all_train_y_tr <- df_all_train_y[split_val, ]
df_all_train_x_tr <- df_all_train_x[split_val, ]
df_all_train_y_val <- df_all_train_y[-split_val, ]
df_all_train_x_val <- df_all_train_x[-split_val, ]
model_nn <- keras_model_sequential() %>%
layer_dense(units = 150, activation = "relu", input_shape = c(218)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 150, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
recipe <- df_all_train %>%
select(target, one_of(df_imp_sel$variable)) %>%
recipe(target ~ .) %>%
step_meanimpute(all_numeric(), -contains("missing")) %>%
step_center(all_numeric(), -contains("missing"), -target) %>%
step_scale(all_numeric(), -contains("missing"), -target)
# step_pca(contains("missing"), num = 10)
recipe_prep <- prep(recipe)
recipe_bake <- prep(recipe, retain = TRUE) %>%
juice()
### ==========
split_val <- createDataPartition(recipe_bake$target, 1, 0.8, list = FALSE)
df_all_train_y <- as.matrix(recipe_bake[, 1])
df_all_train_x <- recipe_bake[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
df_all_train_y_tr <- df_all_train_y[split_val, ]
df_all_train_x_tr <- df_all_train_x[split_val, ]
df_all_train_y_val <- df_all_train_y[-split_val, ]
df_all_train_x_val <- df_all_train_x[-split_val, ]
model_nn <- keras_model_sequential() %>%
layer_dense(units = 150, activation = "relu", input_shape = c(218)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 150, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
dim(df_all_train_x)
dim(recipe_bake)
split_val <- createDataPartition(recipe_bake$target, 1, 0.8, list = FALSE)
df_all_train_y <- as.matrix(recipe_bake[, 1])
df_all_train_x <- recipe_bake[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
df_all_train_y_tr <- df_all_train_y[split_val, ]
df_all_train_x_tr <- df_all_train_x[split_val, ]
df_all_train_y_val <- df_all_train_y[-split_val, ]
df_all_train_x_val <- df_all_train_x[-split_val, ]
recipe <- df_all_train %>%
select(target, one_of(df_imp_sel$variable)) %>%
recipe(target ~ .) %>%
step_meanimpute(all_numeric(), -contains("missing")) %>%
step_center(all_numeric(), -contains("missing"), -target) %>%
step_scale(all_numeric(), -contains("missing"), -target)
# step_pca(contains("missing"), num = 10)
recipe_prep <- prep(recipe)
recipe_bake <- prep(recipe, retain = TRUE) %>%
juice()
### ==========
split_val <- createDataPartition(recipe_bake$target, 1, 0.8, list = FALSE)
df_all_train_y <- as.matrix(recipe_bake[, 1])
df_all_train_x <- recipe_bake[, -1] %>%
mutate_all(as.numeric) %>%
as.matrix()
df_all_train_y_tr <- df_all_train_y[split_val, ]
df_all_train_x_tr <- df_all_train_x[split_val, ]
df_all_train_y_val <- df_all_train_y[-split_val, ]
df_all_train_x_val <- df_all_train_x[-split_val, ]
model_nn <- keras_model_sequential() %>%
layer_dense(units = 150, activation = "relu", input_shape = c(218)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 150, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
model_nn <- keras_model_sequential() %>%
layer_dense(units = 200, activation = "relu", input_shape = c(218)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 10, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
model_nn <- keras_model_sequential() %>%
layer_dense(units = 200, activation = "relu", input_shape = c(218)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 100, activation = "relu") %>%
layer_dropout(rate = 0.2) %>%
layer_dense(units = 1, activation = "sigmoid")
model_nn %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
training_nn <- model_nn %>% fit(
df_all_train_x_tr,
df_all_train_y_tr,
validation_data = list(
df_all_train_x_val,
df_all_train_y_val
),
epochs = 10,
batch_size = 50,
sample_weight = ifelse(df_all_train_y_tr == "1", 20, 1)
# class_weight = list(
#   "0" = 1,
#   "1" = 10
#   )
)
###
dinner <- df_all_test %>%
select(target, one_of(df_imp_sel$variable)) %>%
bake(recipe_prep, .)
df_all_test_y <- as.matrix(dinner[, 1])
df_all_test_x <- dinner[, -1] %>%
mutate_all(scale, center = TRUE, scale = TRUE) %>%
as.matrix()
model_nn %>%
keras::evaluate(df_all_test_x, df_all_test_y)
###
df_prd_prb <- predict_proba(
model_nn,
df_all_test_x
)
df_prd_raw <- predict_classes(
model_nn,
df_all_test_x
)
supper <- data_frame(
truth = dinner$target,
prediction = as.vector(df_prd_raw),
estimate = as.vector(df_prd_prb)
) %>%
mutate(
truth = as.factor(truth),
prediction = as.factor(prediction),
)
plot_density(supper, estimate, truth, quantile_low = 0, quantile_high = 1)
plot_boxplot(supper, truth, estimate, truth, quantile_low = 0, quantile_high = 1)
# supper %<>%
#   mutate(
#     prediction_cal = as.factor(ifelse(estimate >= 0.125, "Failure", "Success"))
#   )
confusionMatrix(supper$prediction, supper$truth, , mode = "everything")
expand.grid(
alpha = c(0, 0.25, 0.5, 0.75, 1),
lambda = 10 ^ seq(-4, 0, length = 20)
)
